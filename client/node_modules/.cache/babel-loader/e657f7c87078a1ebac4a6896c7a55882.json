{"ast":null,"code":"var _jsxFileName = \"/home/phuocnghia712/Desktop/Cshttt/client/src/components/mainpages/createProduct/UploadmImg.js\";\nimport React, { useState, useContext, useEffect } from 'react';\nimport { GlobalState } from '../../../GlobalState';\nimport axios from 'axios';\nimport Loading from '../utils/loading/Loading';\nimport { useHistory, useParams } from 'react-router';\nimport { Link } from 'react-router-dom';\nimport warning from \"../../../img/warning.svg\";\nimport checkic from \"../../../img/check.svg\";\nimport left from \"../../../img/left.svg\";\nimport { use } from '../../../../../routes/userRouter';\n\nfunction UploadmImg() {\n  const state = useContext(GlobalState);\n  const [images, setImages] = useState([]);\n  const [isAdmin] = state.userAPI.isAdmin;\n  const [token] = state.token;\n  const [loading, setLoading] = useState(false);\n  const params = useParams();\n  const history = useHistory();\n  const [check, setCheck] = useState(false);\n  const styleUpload = {\n    display: images ? \"block\" : \"none\"\n  };\n  /* const handleDestroy = async () => {\n       try {\n           if(!isAdmin) return alert(\"You're not an admin\")\n           setLoading(true)\n           await axios.post('/api/destroy', {public_id: images.public_id}, {\n               headers: {Authorization: token}\n           })\n           setLoading(false)\n           setImages(false)\n       } catch (err) {\n           alert(err.response.data.msg)\n       }\n   }*/\n\n  const handleUpload = async e => {\n    e.preventDefault();\n\n    try {\n      if (!isAdmin) return alert(\"You're not an admin\");\n      /* const file = e.target.files[0]\n           if(!file) return alert(\"File not exist.\")\n         if(file.size > 1024 * 1024) // 1mb\n           return alert(\"Size too large!\")\n         if(file.type !== 'image/jpeg' && file.type !== 'image/png') // 1mb\n           return alert(\"File format is incorrect.\")\n         let formData = new FormData()\n       formData.append('file', file)\n         setLoading(true)\n       const res = await axios.post('/api/upload', formData, {\n           headers: {'content-type': 'multipart/form-data', Authorization: token}\n       })\n       setLoading(false)*/\n      //setImages(res.data)\n\n      const files = e.target.files; //  console.log(files)\n\n      var i = 0;\n      let formData = new FormData();\n\n      for (i; i < files.length; i++) {\n        formData.append('files', files[i]);\n      }\n\n      setLoading(true);\n      const res = await axios.post(`/api/uploadmany/${params.id}`, formData, {\n        headers: {\n          'content-type': 'multipart/form-data',\n          Authorization: token\n        }\n      });\n      setLoading(false);\n      setCheck(true); // setImages(res.data.data[0])\n      //console.log(res.data.data)\n      //history.push('/product')\n\n      /*  for ( i; i<files.length;i++){\n        console.log(i)    \n        if(!files[i]) return alert(\"File not exist.\")\n           if(files[i].size > 1024 * 1024) // 1mb\n            return alert(files[i].name+\" \"+\"Size too large!\")\n               console.log(files[i].type)\n        if(files[i].type !== 'image/jpeg' && files[i].type !== 'image/png') // 1mb\n            return alert(i+\" \"+\"File format is incorrect.\")\n           let formData = new FormData()\n        formData.append('file', files[i])\n           setLoading(true)\n        const res = await axios.post('/api/upload', formData, {\n            headers: {'content-type': 'multipart/form-data', Authorization: token}\n        })\n        setLoading(false)\n        setImages(res.data)\n       console.log(res.data.url)\n      }*/\n    } catch (err) {// alert(err.response.data.msg)\n    }\n  };\n\n  console.log(check);\n  const [imagemores, setImagemore] = useState([]);\n\n  const getimage = async () => {\n    const res = await Axios.get(`/api/getimg/${params.id}`);\n    setImages(res.data.data);\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"fun\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    className: \"step\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 17\n    }\n  }, \"Updates: For more images\"), /*#__PURE__*/React.createElement(Link, {\n    className: \"fun1\",\n    to: \"/product\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    className: \"funmini\",\n    src: left,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 21\n    }\n  }, \"Return\"))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"upload\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"file\",\n    name: \"files\",\n    id: \"files\",\n    onChange: handleUpload,\n    multiple: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 17\n    }\n  })), check === true ? /*#__PURE__*/React.createElement(\"div\", {\n    className: \"alertcontainer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"alert\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    className: \"iconup\",\n    src: checkic,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 29\n    }\n  }), /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 29\n    }\n  }, \"Successful update more images for product\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"alertbtn\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(Link, {\n    className: \"btn1\",\n    to: \"/product\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 29\n    }\n  }, \"Products\"), /*#__PURE__*/React.createElement(Link, {\n    className: \"btn1 color\",\n    to: \"/create_product\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 29\n    }\n  }, \"Update new one\"))) : /*#__PURE__*/React.createElement(\"div\", {\n    className: \"alert warning\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    className: \"iconup\",\n    src: warning,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 25\n    }\n  }), /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 25\n    }\n  }, \"Please select more than one image\")));\n}\n\nexport default UploadmImg;","map":{"version":3,"sources":["/home/phuocnghia712/Desktop/Cshttt/client/src/components/mainpages/createProduct/UploadmImg.js"],"names":["React","useState","useContext","useEffect","GlobalState","axios","Loading","useHistory","useParams","Link","use","UploadmImg","state","images","setImages","isAdmin","userAPI","token","loading","setLoading","params","history","check","setCheck","styleUpload","display","handleUpload","e","preventDefault","alert","files","target","i","formData","FormData","length","append","res","post","id","headers","Authorization","err","console","log","imagemores","setImagemore","getimage","Axios","get","data","left","checkic","warning"],"mappings":"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","sourcesContent":["import React, { useState, useContext, useEffect } from 'react'\nimport { GlobalState } from '../../../GlobalState'\nimport axios from 'axios'\nimport Loading from '../utils/loading/Loading'\nimport { useHistory, useParams } from 'react-router'\nimport { Link } from 'react-router-dom'\nimport warning from '../../../img/warning.svg'\nimport checkic from '../../../img/check.svg'\nimport left from '../../../img/left.svg'\nimport { use } from '../../../../../routes/userRouter'\n\nfunction UploadmImg() {\n    const state = useContext(GlobalState)\n    const [images, setImages] = useState([])\n    const [isAdmin] = state.userAPI.isAdmin\n\n    const [token] = state.token\n    const [loading, setLoading] = useState(false)\n\n    const params = useParams()\n    const history = useHistory()\n    const [check, setCheck] = useState(false)\n\n\n\n    const styleUpload = {\n        display: images ? \"block\" : \"none\"\n    }\n    /* const handleDestroy = async () => {\n         try {\n             if(!isAdmin) return alert(\"You're not an admin\")\n             setLoading(true)\n             await axios.post('/api/destroy', {public_id: images.public_id}, {\n                 headers: {Authorization: token}\n             })\n             setLoading(false)\n             setImages(false)\n         } catch (err) {\n             alert(err.response.data.msg)\n         }\n     }*/\n    const handleUpload = async e => {\n        e.preventDefault()\n        try {\n            if (!isAdmin) return alert(\"You're not an admin\")\n\n            /* const file = e.target.files[0]\n                 if(!file) return alert(\"File not exist.\")\n \n             if(file.size > 1024 * 1024) // 1mb\n                 return alert(\"Size too large!\")\n \n             if(file.type !== 'image/jpeg' && file.type !== 'image/png') // 1mb\n                 return alert(\"File format is incorrect.\")\n \n             let formData = new FormData()\n             formData.append('file', file)\n \n             setLoading(true)\n             const res = await axios.post('/api/upload', formData, {\n                 headers: {'content-type': 'multipart/form-data', Authorization: token}\n             })\n             setLoading(false)*/\n            //setImages(res.data)\n            const files = e.target.files\n            //  console.log(files)\n            var i = 0;\n            let formData = new FormData()\n\n            for (i; i < files.length; i++) {\n                formData.append('files', files[i])\n            }\n            setLoading(true)\n            const res = await axios.post(`/api/uploadmany/${params.id}`, formData, {\n                headers: { 'content-type': 'multipart/form-data', Authorization: token }\n            })\n\n            setLoading(false)\n            setCheck(true)\n            // setImages(res.data.data[0])\n            //console.log(res.data.data)\n\n\n            //history.push('/product')\n            /*  for ( i; i<files.length;i++){\n              console.log(i)    \n              if(!files[i]) return alert(\"File not exist.\")\n  \n              if(files[i].size > 1024 * 1024) // 1mb\n                  return alert(files[i].name+\" \"+\"Size too large!\")\n  \n                  console.log(files[i].type)\n              if(files[i].type !== 'image/jpeg' && files[i].type !== 'image/png') // 1mb\n                  return alert(i+\" \"+\"File format is incorrect.\")\n  \n              let formData = new FormData()\n              formData.append('file', files[i])\n  \n              setLoading(true)\n              const res = await axios.post('/api/upload', formData, {\n                  headers: {'content-type': 'multipart/form-data', Authorization: token}\n              })\n              setLoading(false)\n              setImages(res.data)\n             console.log(res.data.url)\n          }*/\n        } catch (err) {\n            // alert(err.response.data.msg)\n        }\n    }\n    console.log(check)\n\n    const [imagemores, setImagemore] = useState([])\n    const getimage = async () => {\n        const res = await Axios.get(`/api/getimg/${params.id}`)\n        setImages(res.data.data)\n    }\n\n    return (\n        <>\n            <div className=\"fun\">\n                <h1 className=\"step\">Updates: For more images</h1>\n                <Link className=\"fun1\" to=\"/product\">\n                    <img className=\"funmini\" src={left} />\n                    <p>Return</p></Link>\n            </div>\n\n            <div className=\"upload\">\n                <input type=\"file\" name=\"files\" id=\"files\" onChange={handleUpload} multiple />\n\n\n            </div>\n\n            {\n                check === true ?\n                    <div className=\"alertcontainer\">\n                        <div className=\"alert\">\n                            <img className=\"iconup\" src={checkic} />\n                            <h1>Successful update more images for product</h1>\n                        </div>\n                        <div className=\"alertbtn\">\n                            <Link className=\"btn1\" to=\"/product\">Products</Link>\n                            <Link className=\"btn1 color\" to=\"/create_product\">Update new one</Link>\n\n                        </div>\n                    </div>\n                    :\n                    <div className=\"alert warning\">\n                        <img className=\"iconup\" src={warning} />\n                        <h1>Please select more than one image</h1>\n                    </div>\n            }\n        </>\n    )\n}\n\nexport default UploadmImg;"]},"metadata":{},"sourceType":"module"}